@using code.Models;
@using code.Services;
@using code.Auth;
@using Microsoft.AspNetCore.Components.Web;

@inject IHttpContextAccessor HttpContextAccessor
@inject AccountManagerService manager
@inject LoggerService loggerService
@inject NavigationManager uriHelper
@inject UserValidationService userValidation

<div class="user-list">

<div class="add-button">
    @if(Nevyplnil){
        <h6>Nevyplnili ste všetky položky, používateľ nebol pridaný.</h6>
    }
    <button class="note-form-button" @onclick="e => AddAccount()"
        data-toggle="modal" data-target="#productModal" data-bs-toggle="modal" data-bs-target="#productModal">
        Pridať
    </button>
</div>
@try{
    @foreach(var a in accounts){
        <div class="user-tab">
            <div class="user-info" style="word-break: break-all;">
                Meno: <b>@a.Name</b><br>
                Email: <b>@a.Mail</b>
            </div>
            <small class="text-muted">
                @if (a.Id != Convert.ToInt32(HttpContextAccessor.HttpContext.User.FindFirst("Id").Value))
                {
                <button class="note-form-button" @onclick="e => ModifyPriviliges(a.Id)"
                    data-toggle="modal" data-target="#productModal" data-bs-toggle="modal" data-bs-target="#productModal">
                    Zmena privilégií
                </button>
                }
                <button class="note-form-button" @onclick="e => ChangePassword(a.Id)"
                    data-toggle="modal" data-target="#productModal" data-bs-toggle="modal" data-bs-target="#productModal">
                    Zmena hesla
                </button>
                <button class="note-form-button" @onclick="e => ChangeMail(a.Id)"
                    data-toggle="modal" data-target="#productModal" data-bs-toggle="modal" data-bs-target="#productModal">
                    Zmena emailu
                </button>
                <button class="note-form-button" @onclick="e => SelectAccountForDeletion(a.Id)"
                    data-toggle="modal" data-target="#productModal" data-bs-toggle="modal" data-bs-target="#productModal">
                    Vymazať
                </button>
            </small>
        </div>
    }
}catch(System.NullReferenceException){
    <h5>Loading users from database</h5>
}
</div>

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
    @if(DeleteAcc){
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">Zmazanie účtu</h5>
                <button @onclick="e => nullAll()" type="button" class="close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="color: black;">
                Ste si istý, že chcete zmazať účet používateľa @Acc.Name?
            </div>
            <button @onclick="e => DeleteSelectedAccount()"
                class="btn btn-success" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                Áno
            </button>
            <button class="btn btn-danger" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                Nie
            </button>
        </div>
    }
    @if(AddAcc){
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">Pridanie účtu</h5>
                <button @onclick="e => nullAll()" type="button" class="close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class = "inputs">
                    Meno:
                    <input class="note-form-input" type="text" id="name" name="name" @bind="name" maxlength="30"><br>
                </div>
                <br>
                <div class = "inputs">
                    Email:
                    <input class="note-form-input" type="text" id="mail" name="mail" @bind="mail"><br>
                </div>
                <br>
                <div class = "inputs">
                    Privilege to manage users:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[0]"><br>
                    Privilege to manage notes:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[1]"><br>
                    Privilege to create templates:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[2]"><br>
                    Privilege to manage trains:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[3]"><br>
                    Privilege to comment trains:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[4]"><br>
                    Privilege to write on blackboard:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[5]"><br>
                    Privilege to log into the site:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[6]"><br>
                </div>
                <br>
                <div class = "inputs">
                    Heslo:
                    <input class="note-form-input" type="text" id="pass" name="pass" @bind="pass"><br>
                </div>
            </div>
            <button @onclick="e => SubmitNewAccount()"
                class="btn btn-success" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                Pridať
            </button>
        </div>
    }
    @if(PrivAcc){
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">Zmena privilégií</h5>
                <button @onclick="e => nullAll()" type="button" class="close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class = "inputs">
                    Prístup k stránke:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[0]"><br>
                    Manažment používateľov:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[1]"><br>
                    Manažmenť poznámok:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[2]"><br>
                    Vytváranie šablón:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[3]"><br>
                    Manažment vlakov:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[4]"><br>
                    Komentovanie vlakov:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[5]"><br>
                    Písanie na tabuľu poznámok:
                    <input type="checkbox" id="privileges" name="privileges" @bind="privileges[6]"><br>
                </div>
            </div>
            <button @onclick="e => SavePrivileges()"
                class="btn btn-success" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                Potvrdiť
            </button>
        </div>
    }
    @if(MailAcc){
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">Zmena emailu</h5>
                <button @onclick="e => nullAll()" type="button" class="close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class = "inputs">
                    Email:
                    <input class="note-form-input" type="text" id="mail" name="mail" @bind="mail"><br>
                </div>
            </div>
            <button @onclick="e => ChangeEmail()"
                class="btn btn-success" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                Potvrdiť
            </button>
        </div>
    }
    @if(PassAcc){
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">Zmena hesla</h5>
                <button @onclick="e => nullAll()" type="button" class="close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class = "inputs">
                    Nové heslo:
                    <input class="note-form-input" type="text" id="mail" name="mail" @bind="pass"><br>
                </div>
            </div>
            <button @onclick="e => ChangePass()"
                class="btn btn-success" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
                Potvrdiť
            </button>
        </div>
    }
    </div>
</div>
    

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">



 @code{
    bool DeleteAcc;
    bool loading = true;
    Account? Acc, tempAcc;
    SQLService s = new SQLService(new DbConnectionService());
    bool AddAcc = false;
    bool PrivAcc = false;
    bool PassAcc = false;
    bool MailAcc = false;
    bool Nevyplnil = false;
    string name;
    string mail;
    bool[] privileges = new bool[7];
    string? pass;
    List<Account>? accounts;

    async Task InitAccounts(){
        accounts = await manager.GetAccounts();
        loading = false;
    }
    void nullAll(){
        DeleteAcc = false;
        PrivAcc = false;
        PassAcc = false;
        MailAcc = false;
        AddAcc = false;
    }

    void SelectAccountForDeletion(int AccountId)
    {
        Acc = accounts.First(x => x.Id == AccountId);
        nullAll();
        DeleteAcc = true;
    }

    void DeleteSelectedAccount(){   
        Acc.DeleteSelf(s, userValidation);
        loggerService.writeUserDelete(HttpContextAccessor.HttpContext, Acc);
        Acc = null;
        DeleteAcc = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    void AddAccount(){
        Nevyplnil = false;
        for(int i =0;i<7;i++){
            privileges[i]=false;
        }
        nullAll();
        AddAcc = true;
    }

    void SubmitNewAccount(){
        if(name==null || mail==null || pass==null){
            Nevyplnil = true;
            return;
        }
        Acc = null;
        AddAcc = false;
        int p = 0;
        for(int i = 0;i<7;i++){
            if(privileges[i]==true){
                p = AuthRequirementHandler.setBit(p,i);
            }
        }
        manager.AddAccount(new Account(accounts.Count,name,mail,p,pass));
        loggerService.writeUserNew(HttpContextAccessor.HttpContext, new Account(accounts.Count,name,mail,p,pass));
        name = mail = pass = null;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }


    void ModifyPriviliges(int selectedAccountId){
        Acc = accounts.First(x => x.Id == selectedAccountId);
        
        for(int i = 0;i<7;i++){
            if(AuthRequirementHandler.isBitSet(Acc.Privileges,i)){
                privileges[i] = true;
            }
        }
        nullAll();
        PrivAcc = true;
    }

    void SavePrivileges(){
        PrivAcc = false;
        int p = 0;
        for(int i = 0;i<7;i++){
            if(privileges[i]==true){
                p = AuthRequirementHandler.setBit(p,i);
            }
        }
        tempAcc = new Account();
        tempAcc.Privileges = p;
        Acc.UpdatePrivileges(p,s, userValidation);
        loggerService.writeUserPrivilegesChange(HttpContextAccessor.HttpContext, tempAcc, Acc);
        Acc = null;
        tempAcc = null;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    void ChangePassword(int selectedAccountId){
        Acc = accounts.First(x => x.Id == selectedAccountId);
        nullAll();
        PassAcc = true;
    }

    void ChangePass(){
        Acc.UpdatePassWord(pass,s, userValidation);
        loggerService.writeUserPassChange(HttpContextAccessor.HttpContext, Acc);
        Acc = null;
        PassAcc = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
    void ChangeMail(int selectedAccountId){
        Acc = accounts.First(x => x.Id == selectedAccountId);
        mail = Acc.Mail;
        nullAll();
        MailAcc = true;
    }

    void ChangeEmail(){
        tempAcc = new Account();
        tempAcc.Mail = Acc.Mail;
        tempAcc.Name = Acc.Name;
        Acc.UpdateMail(mail,s, userValidation);
        loggerService.writeUserMailChange(HttpContextAccessor.HttpContext, tempAcc, Acc);
        Acc = null;
        tempAcc = null;
        MailAcc = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        await InitAccounts();
    }

 }
